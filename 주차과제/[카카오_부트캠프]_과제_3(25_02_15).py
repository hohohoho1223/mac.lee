# -*- coding: utf-8 -*-
"""[카카오 부트캠프] 과제_3(25.02.15).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fq4FHwDSwbOmtB8Ybo_jGbtiKbRwv7z5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 1. 데이터 리모델링과 처리
# - 주어진 데이터를 pandas DataFrame으로 만들고, groupby 기능을 이용해 Year별 총 Sales를 구하세요.
# - 구한 결과를 바탕으로, Year별 총 매출을 Total_Sales라는 새로운 컬럼으로 추가한 DataFrame을 출력하세요.
# - - 데이터:
# Year | Quarter | Sales
# ---------------------
# 2023 | Q1      | 200
# 2023 | Q2      | 300
# 2023 | Q3      | 250

# 2. 정형 데이터와 비정형 데이터 처리
# [정형 데이터 처리]
# - 주어진 데이터를 DataFrame으로 만들고, Age가 30세 이상(>= 30), Salary가 5만 이상(>= 50000)인 직원만 필터링한 DataFrame을 만드세요.
# - 필터링된 결과에서, 직원의 Name, Age, Department 컬럼만 출력하세요(또는 필요한 컬럼만).
# - - 데이터:
# data = {
#     "ID": [1, 2, 3, 4, 5],
#     "Name": ["Alice", "Bob", "Charlie", "David", "Eve"],
#     "Age": [25, 32, 45, 29, 40],
#     "Department": ["HR", "Finance", "IT", "Marketing", "IT"],
#     "Salary": [48000, 52000, 60000, 45000, 70000]
# }

# [비정형 데이터 처리]
# - API에서 JSON 데이터를 가져와 DataFrame으로 변환 후 아래 필드를 추출해 새로운 DataFrame을 만드세요.
# - - id → ID
# - - name → Name
# - - username → Username
# - - email → Email
# - - address.city → City
# - - company.name → Company
# - City가 "Lebsackbury" 또는 "Roscoeview"에 해당하는 사용자만 필터링하세요.
# - 필터링된 DataFrame을 CSV 파일로 저장하세요.

# - - API: https://jsonplaceholder.typicode.com/users


# 3. 시각화 및 시계열 데이터 활용
# - 아래 데이터를 pandas와 matplotlib를 사용해 시계열 그래프로 시각화하세요.
# - - 데이터:
# Date       | Price
# -----------------
# 2023-01-01 | 100
# 2023-02-01 | 120
# 2023-03-01 | 130
# 2023-04-01 | 125
# 2023-05-01 | 140
# - - X축은 날짜, Y축은 가격으로 설정하고, 가격의 추세를 선 그래프로 나타내세요.

#1

df = pd.DataFrame({"Year" : [2023,2023,2023], "Quarter" : ["Q1" , "Q2", "Q3"], "Sales" :[200,300,250]})
df = df.groupby("Year")['Sales'].sum()
df

#2
#정형데이터 처리

data = {
    "ID": [1, 2, 3, 4, 5],
    "Name": ["Alice", "Bob", "Charlie", "David", "Eve"],
    "Age": [25, 32, 45, 29, 40],
    "Department": ["HR", "Finance", "IT", "Marketing", "IT"],
    "Salary": [48000, 52000, 60000, 45000, 70000]
}

df = pd.DataFrame(data)
df_filtered = df[(df["Age"] >= 30) & (df["Salary"] >= 50000)]
df_filtered.loc[ : , ["Name" , "Age" , "Department"]]
# df_filtered.iloc[:,1:4] # iloc(정수 인덱스)로도 표현 가능

#2
#비정형 데이터 처리

data = pd.read_json("https://jsonplaceholder.typicode.com/users")
df = pd.DataFrame(data)
df

new_df = df.iloc[:,[0,1,2,3,4,7]] #인덱스로 일부 선택
new_df = new_df.rename(columns = {
    "id" : "ID",
    "name" : "Name",
    "username" : "Username",
    "email": "Email",
    "address" : "Address",
    "company" : "Company"
    })

new_df["City"] = new_df["Address"].apply( lambda x: x["city"])
new_df["Company"] = new_df["Company"].apply(lambda x: x["name"])

new_df_filtered = new_df[new_df["City"].isin(["Lebsackbury","Roscoeview"])]
new_df_filtered.to_csv("new_df_filtered.csv", index=False)

new_df_filtered

#3

data = {
    "Date": ["2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01", "2023-05-01"],
    "Price": [100, 120, 130, 125, 140]
}

df = pd.DataFrame(data)

plt.plot(df["Date"], df["Price"], marker='o', linestyle='-', color='b')

plt.xlabel("Date")
plt.ylabel("Price")

plt.grid()
plt.show()