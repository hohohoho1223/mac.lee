# -*- coding: utf-8 -*-
"""[카카오 부트캠프] 3주차_미니퀘스트.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/149cZe6L6R0e9z06muHc7_v2Xn7kvEi8C
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""#정형데이터_미니퀘스트"""

#1
# 샘플 데이터프레임을 생성한 후, 데이터의 기본 정보를 출력하는 코드를 작성하세요.
# 샘플 데이터 생성
data = {
    '이름': ['김철수', '이영희', '박민수', '최지현', '홍길동'],
    '나이': [25, 30, 35, 28, 40],
    '직업': ['개발자', '마케터', '개발자', '디자이너', 'CEO'],
    '연봉': [4000, 3500, 5000, 4200, 10000],
    '가입일': ['2020-05-21', '2019-07-15', '2021-01-10', '2018-11-03', '2017-09-27']
}

df = pd.DataFrame(data)
df.info()

#2
# 샘플 데이터에서 나이가 30 이상이고 연봉이 5000 이하인 사람들만 필터링하는 코드를 작성하세요.
# 샘플 데이터 생성
data = {
    '이름': ['김철수', '이영희', '박민수', '최지현', '홍길동', '정지훈', '이지은'],
    '나이': [25, 30, 35, 28, 40, 50, 22],
    '직업': ['개발자', '마케터', '개발자', '디자이너', 'CEO', '디자이너', '마케터'],
    '연봉': [4000, 3500, 5000, 4200, 10000, 4600, 3300],
    '가입일': ['2020-05-21', '2019-07-15', '2021-01-10', '2018-11-03', '2017-09-27', '2016-04-11', '2022-03-19']
}

df = pd.DataFrame(data)
df_filtered = df[(df['나이'] >= 30) & (df['연봉'] <= 5000)]
df_filtered

#3
# 샘플 데이터에서 가입 연도가 2019년 이전인 사람들을 찾아 연봉을 10% 인상한 후, 전체 평균 연봉을 계산하는 코드를 작성하세요.
# 샘플 데이터 생성
data = {
    '이름': ['김철수', '이영희', '박민수', '최지현', '홍길동', '정지훈', '이지은'],
    '나이': [25, 30, 35, 28, 40, 50, 22],
    '직업': ['개발자', '마케터', '개발자', '디자이너', 'CEO', '디자이너', '마케터'],
    '연봉': [4000, 3500, 5000, 4200, 10000, 4600, 3300],
    '가입일': ['2020-05-21', '2019-07-15', '2021-01-10', '2018-11-03', '2017-09-27', '2016-04-11', '2022-03-19']
}

df = pd.DataFrame(data)
df_before_2019 = df[df['가입일']< '2019-01-01']
df_before_2019['연봉'] = df_before_2019['연봉'] * 1.1
df_new = df.merge(df_before_2019, how='')
df_new

"""#비정형데이터_미니퀘스트

"""

#1
# JSON 형식의 데이터를 직접 생성한 후, Pandas 데이터프레임으로 변환하는 코드를 작성하세요.
# JSON 데이터 직접 생성
import pandas as pd

data = '''
[
    {"이름": "김철수", "나이": 25, "직업": "개발자", "연봉": 4000},
    {"이름": "이영희", "나이": 30, "직업": "마케터", "연봉": 3500},
    {"이름": "박민수", "나이": 35, "직업": "디자이너", "연봉": 4200}
]
'''
# JSON 데이터를 Pandas 데이터프레임으로 변환
df = pd.read_json(data)
df

#2
# 아래 샘플 데이터에서 한글과 공백을 제외한 모든 문자를 제거하고, 공백을 하나로 정리하는 코드를 작성하세요.
# 샘플 데이터 (비정형 텍스트)
text = "안녕하세요!!! 저는 AI 모델-입니다. 12345 데이터를   정리해 보겠습니다."

#3
# 주어진 텍스트 데이터를 문장 단위로 분리한 후, 각 문장의 단어 개수를 데이터프레임으로 변환하는 코드를 작성하세요.
# 샘플 텍스트 데이터
text = "자연어 처리는 재미있다. 파이썬과 pandas를 활용하면 편리하다. 데이터 분석은 흥미롭다."

"""#막대그래프_미니퀘스트"""

#1
# matplotlib을 활용하여 5개의 카테고리와 각각의 값이 포함된 기본 세로 막대 그래프를 생성하는 코드를 작성하세요
# 샘플 데이터 생성
categories = ['A', 'B', 'C', 'D', 'E']
values = [12, 25, 18, 30, 22]
plt.plot(categories, values)
plt.show()

#2
# 누적형 막대 그래프를 생성하여, 두 개의 연도별 데이터를 각각 다른 색상으로 누적하여 표현하는 코드를 작성하세요.
# 샘플 데이터 생성
categories = ['A', 'B', 'C', 'D', 'E']
values_2023 = [10, 15, 20, 25, 30]
values_2024 = [5, 10, 12, 18, 22]

x = np.arange(len(categories))

plt.bar(x, values_2023, color='red')
plt.bar(x, values_2024, bottom=values_2023,color='blue')

plt.show()

#3
# 한 기업의 부서별 연간 성과(2023년 vs 2024년)를 비교하는 그룹형 막대 그래프를 생성하는 코드를 작성하세요.
# 샘플 데이터 생성
departments = ['Sales', 'Marketing', 'IT', 'HR', 'Finance']
performance_2023 = [80, 70, 90, 60, 75]
performance_2024 = [85, 75, 95, 65, 80]

bar_width =0.4

x = np.arange(len(departments))

plt.bar(x-bar_width/2, performance_2023, width=bar_width, color='purple', label='2023')
plt.bar(x+bar_width/2, performance_2024, width=bar_width, color ='green', label='2024')

plt.xticks(x, departments)
plt.xlabel('Departments')
plt.ylabel('Performance')
plt.legend()

plt.show()

"""#히스토그램_미니퀘스트"""

#1
# 정규 분포를 따르는 1000개의 데이터를 생성한 후, 구간을 15개로 설정한 히스토그램을 그리는 코드를 작성하세요.

# 정규 분포를 따르는 1000개의 데이터 생성
data = np.random.randn(1000)

plt.hist(data, bins =15, color = 'skyblue', edgecolor = 'black')
plt.show()

#2
# 두 개의 서로 다른 정규 분포를 따르는 데이터셋을 생성한 후, 두 히스토그램을 같은 그래프에서 겹쳐서 비교하는 코드를 작성하세요.
# 첫 번째 데이터셋 (평균 0, 표준편차 1)
data1 = np.random.randn(1000)

# 두 번째 데이터셋 (평균 3, 표준편차 1)
data2 = np.random.randn(1000) + 3

plt.hist(data1,bins = 15,color='green',edgecolor ='black')
plt.hist(data2,bins = 15,color='red', edgecolor ='black')
plt.show()

#3
# 한 데이터셋의 누적 히스토그램을 그린 후, X축과 Y축의 적절한 레이블을 설정하는 코드를 작성하세요.
# 정규 분포를 따르는 1000개의 데이터 생성
data = np.random.randn(1000)

plt.hist(data, bins=20, cumulative=True, color='skyblue', edgecolor='black')
plt.xlabel('Value')
plt.ylabel('Cumulative Frequency')
plt.show()

"""#산점도_미니퀘스트"""

#1
# 두 개의 리스트 x = [1, 2, 3, 4, 5], y = [3, 1, 4, 5, 2]를 사용하여 산점도를 그리고,
#  X축과 Y축의 라벨을 추가하는 코드를 작성하세요.
# 데이터 생성
x = [1, 2, 3, 4, 5]
y = [3, 1, 4, 5, 2]

plt.xlabel("x_axis")
plt.ylabel("y_axis")
plt.scatter(x,y)
plt.show()

#2
# numpy를 활용하여 난수를 생성한 후, 산점도를 그리고 점의 색상과 투명도를 설정하는 코드를 작성하세요.
# 난수 데이터 생성
np.random.seed(42)
x = np.random.rand(50) * 10  # 0~10 범위의 난수 50개
y = np.random.rand(50) * 10  # 0~10 범위의 난수 50개

plt.scatter(x, y, c='blue', alpha=0.5) #절반 투명도
plt.show()

#3
# numpy를 활용하여 세 개의 그룹('A', 'B', 'C')에 속하는 데이터의 산점도를 서로 다른 색상으로 그리는 코드를 작성하세요.
# 데이터 생성
np.random.seed(10)
x = np.random.randn(50) * 2
y = np.random.randn(50) * 2
categories = np.random.choice(['A', 'B', 'C'], size=50)
colors = {'A': 'red', 'B': 'green', 'C': 'blue'}

for i in np.unique(categories):
    idx = categories == i # 이렇게 처리하는게 인상적이었.
    plt.scatter(x[idx],y[idx], color= colors[i],alpha=0.6,s=80)

"""#박스플롯_미니퀘스트"""

#1
# 평균 0, 표준편차 1을 따르는 정규분포 난수 50개를 생성한 후, 해당 데이터를 이용해 기본 박스 플롯을 출력하는 코드를 작성하세요.
# 정규분포를 따르는 난수 50개 생성
np.random.seed(42)
data = np.random.randn(50)

plt.boxplot(data)
plt.show()

#2
# 세 개의 그룹(Group A, Group B, Group C) 에 대해 각각 다른 평균을 가지는 데이터를 생성하고,
# 이를 이용해 다중 박스 플롯을 그리는 코드를 작성하세요.
# 랜덤 데이터 생성 (각 그룹별 평균 다르게 설정)
np.random.seed(42)
group_a = np.random.randn(50) * 1.5  # 표준편차 1.5, 평균 0
group_b = np.random.randn(50) * 1.5 + 3  # 표준편차 1.5, 평균 3
group_c = np.random.randn(50) * 1.5 - 3  # 표준편차 1.5, 평균 -3

plt.boxplot([group_a,group_b,group_c]) #리스트 형태로 입력
plt.show()

#3
# 평균이 **서로 다른 두 개의 그룹(Group X, Group Y)** 을 비교하는 박스 플롯을 그리세요.
# 단, **이상값을 강조하고, 스타일을 커스터마이징**해야 합니다.

# 랜덤 데이터 생성 (두 그룹의 평균 다르게 설정)
np.random.seed(42)
group_x = np.random.randn(50) * 2  # 표준편차 2, 평균 0
group_y = np.random.randn(50) * 2 + 5  # 표준편차 2, 평균 5

plt.boxplot([group_x,group_y],flierprops=dict(marker='o'),patch_artist=True)
plt.show()

"""#고급 다중 그래프_미니퀘스트"""

#1
# plt.subplots()를 사용하여 2x1 형태의 서브플롯을 만들고, 첫 번째 서브플롯에는 y = x^2, 두 번째 서브플롯에는 y = x^3을 그리는 코드를 작성하세요.
# 데이터 생성
x = np.linspace(-5, 5, 100)
y1 = x ** 2  # x의 제곱
y2 = x ** 3  # x의 세제곱

fig, axis = plt.subplots(nrows=2,ncols=1)
axis[0].plot(x,y1)
axis[1].plot(x,y2)

plt.show()

#2
# X축을 공유하는 1행 2열 형태의 서브플롯을 생성하고, 첫 번째 서브플롯에는 정규 분포를 따르는 난수의 히스토그램,
# 두 번째 서브플롯에는 균등 분포를 따르는 난수의 히스토그램을 그리세요.

# 데이터 생성
normal_data = np.random.randn(1000)  # 정규 분포 난수 1000개
uniform_data = np.random.rand(1000)  # 균등 분포 난수 1000개
fig,axis = plt.subplots(nrows=1,ncols=2,sharex=True)
axis[0].hist(normal_data,bins=20,color='green',edgecolor='black')
axis[1].hist(uniform_data,bins=10,color='red',edgecolor='black')
plt.show()

#3
# gridspec을 사용하여 불규칙한 레이아웃의 서브플롯을 생성하고, 각각 선 그래프, 산점도, 막대 그래프, 히스토그램을 그리세요.
# 데이터 생성
import matplotlib.gridspec as gridspec

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.random.randn(100)
categories = ['A', 'B', 'C', 'D', 'E']
values = [3, 7, 5, 2, 8]

fig = plt.figure(figsize=(10,8))
gs = gridspec.GridSpec(3,2,figure=fig)

ax1 = fig.add_subplot(gs[0,:])
ax1.plot(x,y1)

ax2 = fig.add_subplot(gs[1,0])
ax2.scatter(x,y2)

ax3 = fig.add_subplot(gs[1,1])
ax3.bar(categories,values)

ax4 = fig.add_subplot(gs[2,:])
ax4.hist(y2,bins=10)

plt.show()

"""#벤다이어그램_미니퀘스트"""

#1
# 두 개의 과일 집합을 정의하고, 두 집합의 차집합(한 집합에만 존재하는 요소)을 출력하는 코드를 작성하세요.
# 두 개의 과일 집합 정의

import matplotlib.pyplot as plt
from matplotlib_venn import venn2

set_A = {"사과", "바나나", "체리", "망고"}
set_B = {"바나나", "망고", "포도", "수박"}

venn2([set_A,set_B],set_labels=('과일 집합 A', '과일 집합 B'))
plt.show()

#2
# 벤 다이어그램을 그리지 않고, 세 개의 집합을 비교하여 각 집합이 단독으로 가지는 요소 개수와 교집합 개수를 계산하는 코드를 작성하세요.
# 세 개의 과일 집합 정의
from matplotlib_venn import venn3

set_A = {"사과", "바나나", "체리", "망고"}
set_B = {"바나나", "망고", "포도", "수박"}
set_C = {"망고", "수박", "딸기", "오렌지"}

venn3([set_A,set_B,set_C],set_labels=('과일 집합 A', '과일 집합 B','과일 집합 C'))
plt.show()

#3
# **벤 다이어그램을 그리면서, 특정 조건을 만족하는 경우 색상을 다르게 지정하는 코드**를 작성하세요.
# - **조건:** 두 개의 집합을 비교할 때, **교집합이 2개 이상이면 노란색, 그렇지 않으면 기본 색상**을 사용하세요.

# 두 개의 집합 정의
set_A = {"사과", "바나나", "체리", "망고"}
set_B = {"바나나", "망고", "포도", "수박"}

diagram = venn2([set_A,set_B],set_labels=("set_A","set_B"))

intersec = set_A.intersection(set_B)

if len(intersec)>=2:
    diagram.get_patch_by_id('11').set_color('yellow')
# 나머지 부분의 색상은 기본 색상으로 두기
else:
    diagram.get_patch_by_id('11').set_color('white')

diagram.get_patch_by_id('10').set_color('lightblue')
diagram.get_patch_by_id('01').set_color('lightgreen')

plt.show()

